import rndstr from 'rndstr';

export function nyaize(text: string): string {
	const [toNyaize, exclusionMap] = exclude(text);
	const nyaized = toNyaize
		// ja-JP
		.replace(/„Å™/g, '„Å´„ÇÉ').replace(/„Éä/g, '„Éã„É£').replace(/ÔæÖ/g, 'ÔæÜÔΩ¨')
		// en-US
		.replace(/morning/gi, 'mornyan').replace(/everyone/gi, 'everynyan')
		.replace(/o/g, 'owo').replace(/u/g, 'uwu')
		// ko-KR
		.replace(/[ÎÇò-ÎÇ≥]/g, match => String.fromCharCode(
			match.charCodeAt(0)! + 'ÎÉê'.charCodeAt(0) - 'ÎÇò'.charCodeAt(0)
		)).replace(/(Îã§$)|(Îã§(?=\.))|(Îã§(?= ))|(Îã§(?=!))|(Îã§(?=\?))/gm, 'Îã§ÎÉ•')
		.replace(/(Ïïº(?=\?))|(Ïïº$)|(Ïïº(?= ))/gm, 'ÎÉ•');
	return replaceExceptions(nyaized, exclusionMap);
}

export function denyaize(text: string): string {
	return text
		.replace(/„Å´„ÇÉ/g, '„Å™').replace(/„Éã„É£/g, '„Éä').replace(/ÔæÜÔΩ¨/g, 'ÔæÖ')
		.replace(/owo/g, 'o').replace(/uwu/g, 'u')
		.replace(/mornyan/gi, 'morning').replace(/everynyan/gi, 'everyone') // this will result in case related bug
		.replace(/(Îã§ÎÉ•$)|(Îã§ÎÉ•(?=\.))|(Îã§ÎÉ•(?= ))|(Îã§ÎÉ•(?=!))|(Îã§ÎÉ•(?=\?))/gm, 'Îã§')
		.replace(/(ÎÉ•(?=\?))|(ÎÉ•$)|(ÎÉ•(?= ))/gm, 'Ïïº')
		.replace(/[ÎÉê-ÎÉ´]/g, match => String.fromCharCode(
			match.charCodeAt(0)! + 'ÎÇò'.charCodeAt(0) - 'ÎÉê'.charCodeAt(0)
		));
}

function exclude(text: string): [string, Record<string, string>] {
	const map: Record<string, string> = {};
	function substitute(match: string): string {
		let randomstr: string;
		do {
			randomstr = rndstr({ length: 16, chars: 'üÄÄ-üÄ´' });
		} while(Object.prototype.hasOwnProperty.call(map, randomstr));
		map[randomstr] = match;
		return randomstr;
	}
	const replaced = text
		.replace(/(https?:\/\/.*?)(?= |$)/gm, match => substitute(match)) // URL
		.replace(/:([a-z0-9_+-]+):/gim, match => substitute(match)) // emoji
		.replace(/#([^\s.,!?'"#:\/\[\]„Äê„Äë]+)/gm, match => substitute(match)) // hashtag
		.replace(/@\w([\w-]*\w)?(?:@[\w.\-]+\w)?/gm, match => substitute(match)) // mention
		.replace(/<\/?[a-zA-Z]*?>/g, match => substitute(match)) // <jump>, <motion>, etc.
		.replace(/`([^`\n]+?)`/g, match => substitute(match)) // inline code
		.replace(/```(.+?)?\n([\s\S]+?)```(\n|$)/gm, match => substitute(match)); // code block
	return [replaced, map];
}

function replaceExceptions(text: string, map: Record<string, string>): string {	
	for(const rule in map)
		if(Object.prototype.hasOwnProperty.call(map, rule))
			text = text.replace(rule, map[rule]);
	return text;
}